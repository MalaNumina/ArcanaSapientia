////////////////////////
// FJ_SPL_ITM_REINDEX //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																													//
//	I found this in a library created by Ardanis. According to him, he also founds it himself in Rogue Rebalancing	//
//	and it was originally written by Nythrun. I simply included the Ardanis version unchanged, all the credits goes	//
//	to the original autors. I did so mainly because I had to write my own version of some other functions contained	//
//	in that library, so I couldn't include the whole library.														//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~FJ_SPL_ITM_REINDEX~ BEGIN

PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.spl~) BEGIN
  hs = 0x28
  WRITE_LONG 0xc ~-1~ //Identified name
  WRITE_LONG 0x54 ~-1~ //Identified description
  PATCH_FOR_EACH tz IN 0x44 0x48 0x58 0x5c BEGIN
    WRITE_LONG tz 0
  END
END ELSE PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.itm~) BEGIN
  hs = 0x38
END
READ_LONG 0x64 hf //Extended header offset
READ_SHORT 0x68 hc //Extended header count
READ_LONG 0x6a fb //Feature block table offset
READ_SHORT 0x70 fc //Feature block count
PATCH_IF ((hf > fb) AND (hc > 0)) BEGIN // Ardanis: fixed "hc > 1" to "hc > 0"
  READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
  PATCH_IF (~%eh%~ STRING_EQUAL ~fail~) BEGIN
    WHILE ((~%eh%~ STRING_EQUAL ~fail~) AND (hc > 0)) BEGIN
      READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
      hc -= 1
    END
  END
  DELETE_BYTES hf (hs * hc)
  hf = 0x72
  WRITE_LONG 0x64 hf
  WRITE_SHORT 0x68 hc
  fb = (0x72 + (hs * hc))
  WRITE_LONG 0x6a fb
  PATCH_IF !(~%eh%~ STRING_EQUAL ~fail~) BEGIN
    INSERT_BYTES hf (hs * hc)
    WRITE_ASCIIE hf ~%eh%~
  END
END ELSE PATCH_IF ((hf != 0x72) AND (hc = 0)) BEGIN
  hf = 0x72
  WRITE_LONG 0x64 hf
END
FOR (i1 = 0; i1 < (hs * hc); i1 += hs) BEGIN
  WRITE_SHORT (hf + i1 + 0x20) fc
  READ_SHORT (hf + i1 + 0x1e) cx
  fc += cx
END
PATCH_IF (SOURCE_SIZE > (0x72 + (hs * hc) + (0x30 * fc))) BEGIN
  DELETE_BYTES (0x72 + (hs * hc) + (0x30 * fc)) (SOURCE_SIZE - (0x72 + (hs * hc) + (0x30 * fc)))
END

// added by Ardanis
WRITE_SHORT 0x6e 0

END // end of function

////////////////////////
// FJ_SPL_ITM_REINDEX //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																													//
//	I found this in a library created by Ardanis. I simply included the Ardanis funcyion unchanged, all the credits	//
//	goes to him. I did so mainly because I had to write my own version of some other functions contained in that	//
//	library, so I couldn't include the whole library.																//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION ~CREATE_EFFECT~
  INT_VAR
    opcode=0
    target=0
    power=0
    parameter1=0
    parameter2=0
	behavior=0
    timing=0
    duration=0
    probability1=100
    probability2=0
    dicenumber=0
    dicesize=0
    savingthrow=0
    savebonus=0
    resist_dispel=0
    parameter3=0
    parameter4=0
  STR_VAR
    effect=~ag#dummy~
    resource=~~
    vvcresource=~~
    resource2=~~
    effvar=~~
BEGIN
<<<<<<<<...inlined/ag#dummy.eff
>>>>>>>>
COPY ~...inlined/ag#dummy.eff~ ~override/%effect%.eff~
  INSERT_BYTES 0 0x110
  WRITE_ASCII 0 ~EFF V2.0~
  WRITE_ASCII 8 ~EFF V2.0~

  WRITE_LONG 0x10 opcode
  WRITE_LONG 0x14 target
  WRITE_LONG 0x18 power
  WRITE_LONG 0x1c parameter1
  WRITE_LONG 0x20 parameter2
  WRITE_BYTE 0x22 behavior
  WRITE_SHORT 0x24 timing
  WRITE_LONG 0x28 duration
  WRITE_SHORT 0x2c probability1
  WRITE_SHORT 0x2e probability2
  WRITE_ASCIIE 0x30 ~%resource%~ (8)
  WRITE_LONG 0x38 dicenumber
  WRITE_LONG 0x3c dicesize
  WRITE_LONG 0x40 savingthrow
  WRITE_LONG 0x44 savebonus
  WRITE_LONG 0x5c resist_dispel
  WRITE_LONG 0x60 parameter3
  WRITE_LONG 0x64 parameter4
  WRITE_ASCIIE 0x70 ~%vvcresource%~ (8)
  WRITE_ASCIIE 0x78 ~%resource2%~ (8)
  WRITE_ASCIIE 0xa8 ~%effvar%~ (32)
END





