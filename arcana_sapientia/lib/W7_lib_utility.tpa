//////////////////////////
// PATCH/ACTION_PADDING //
//////////////////////////////////////////////////////////////////////////////////
//																				//
//	Pads the given nuber to the amount of digits defined in the pad parameter.	//
//																				//
//////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~PATCH_PADDING~
	INT_VAR
		num = 0
		pad = 2
	RET
		pad_num
BEGIN
	num_len = STRING_LENGTH ~%num%~
	PATCH_IF (num_len < pad) THEN BEGIN
		pad_len = pad - num_len
		INNER_PATCH_SAVE pad_num ~%num%~ BEGIN
			INSERT_BYTES 0 pad_len
			FOR (i = 0; i < pad_len; ++i) BEGIN
				WRITE_BYTE i 48
			END
		END
	END ELSE BEGIN
		TEXT_SPRINT pad_num ~%num%~
	END
END

DEFINE_ACTION_FUNCTION ~ACTION_PADDING~
	INT_VAR
		num = 0
		pad = 2
	RET
		pad_num
BEGIN
	OUTER_SET num_len = STRING_LENGTH ~%num%~
	ACTION_IF (num_len < pad) THEN BEGIN
		OUTER_SET pad_len = pad - num_len
		OUTER_INNER_PATCH_SAVE pad_num ~%num%~ BEGIN
			INSERT_BYTES 0 pad_len
			FOR (i = 0; i < pad_len; ++i) BEGIN
				WRITE_BYTE i 48
			END
		END
	END ELSE BEGIN
		OUTER_TEXT_SPRINT pad_num ~%num%~
	END
END

/////////////////////////
// PATCH/ACTION_BINARY //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																														//
//	Binary conversion and bit manipulation for values up to 32 bits. The size parameter determins the number of byte.	//
//																														//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~PATCH_BINARY~
	INT_VAR
		num = 0
		size = 1
		bit00 = ~-1~
		bit01 = ~-1~
		bit02 = ~-1~
		bit03 = ~-1~
		bit04 = ~-1~
		bit05 = ~-1~
		bit06 = ~-1~
		bit07 = ~-1~
		bit10 = ~-1~
		bit11 = ~-1~
		bit12 = ~-1~
		bit13 = ~-1~
		bit14 = ~-1~
		bit15 = ~-1~
		bit16 = ~-1~
		bit17 = ~-1~
		bit20 = ~-1~
		bit21 = ~-1~
		bit22 = ~-1~
		bit23 = ~-1~
		bit24 = ~-1~
		bit25 = ~-1~
		bit26 = ~-1~
		bit27 = ~-1~
		bit30 = ~-1~
		bit31 = ~-1~
		bit32 = ~-1~
		bit33 = ~-1~
		bit34 = ~-1~
		bit35 = ~-1~
		bit36 = ~-1~
		bit37 = ~-1~
	RET
		num
		bin
	RET_ARRAY
		bits
BEGIN
	DEFINE_ARRAY in_bits BEGIN
	~%bit00%~ ~%bit01%~ ~%bit02%~ ~%bit03%~ ~%bit04%~ ~%bit05%~ ~%bit06%~ ~%bit07%~
	~%bit10%~ ~%bit11%~ ~%bit12%~ ~%bit13%~ ~%bit14%~ ~%bit15%~ ~%bit16%~ ~%bit17%~
	~%bit20%~ ~%bit21%~ ~%bit22%~ ~%bit23%~ ~%bit24%~ ~%bit25%~ ~%bit26%~ ~%bit27%~ 
	~%bit30%~ ~%bit31%~ ~%bit32%~ ~%bit33%~ ~%bit34%~ ~%bit34%~ ~%bit36%~ ~%bit37%~
	END
	size *= 8
	TEXT_SPRINT bin ~0b~
	FOR (i = 0; i < size; ++i) BEGIN
		TEXT_SPRINT b $in_bits(~%i%~)
		PATCH_IF (b = 0) OR (b = 1) THEN BEGIN 
			res = b 
		END ELSE BEGIN
			TEXT_SPRINT ctrl ~0b~
			FOR (j = 0; j < size; ++j) BEGIN
				b = (i = j) ? 1 : 0
				TEXT_SPRINT ctrl ~%ctrl%%b%~
			END
			res = ((num BAND ~%ctrl%~) != 0) ? 1 : 0
		END
		TEXT_SPRINT bin ~%bin%%res%~
		TEXT_SPRINT $bits(~%i%~) ~%res%~
	END
	num = 0 BOR ~%bin%~
END

DEFINE_ACTION_FUNCTION ~ACTION_BINARY~
	INT_VAR
		num = 0
		size = 1
		bit00 = ~-1~
		bit01 = ~-1~
		bit02 = ~-1~
		bit03 = ~-1~
		bit04 = ~-1~
		bit05 = ~-1~
		bit06 = ~-1~
		bit07 = ~-1~
		bit10 = ~-1~
		bit11 = ~-1~
		bit12 = ~-1~
		bit13 = ~-1~
		bit14 = ~-1~
		bit15 = ~-1~
		bit16 = ~-1~
		bit17 = ~-1~
		bit20 = ~-1~
		bit21 = ~-1~
		bit22 = ~-1~
		bit23 = ~-1~
		bit24 = ~-1~
		bit25 = ~-1~
		bit26 = ~-1~
		bit27 = ~-1~
		bit30 = ~-1~
		bit31 = ~-1~
		bit32 = ~-1~
		bit33 = ~-1~
		bit34 = ~-1~
		bit35 = ~-1~
		bit36 = ~-1~
		bit37 = ~-1~
	RET
		num
		bin
	RET_ARRAY
		bits
BEGIN
	ACTION_DEFINE_ARRAY in_bits BEGIN
	~%bit00%~ ~%bit01%~ ~%bit02%~ ~%bit03%~ ~%bit04%~ ~%bit05%~ ~%bit06%~ ~%bit07%~
	~%bit10%~ ~%bit11%~ ~%bit12%~ ~%bit13%~ ~%bit14%~ ~%bit15%~ ~%bit16%~ ~%bit17%~
	~%bit20%~ ~%bit21%~ ~%bit22%~ ~%bit23%~ ~%bit24%~ ~%bit25%~ ~%bit26%~ ~%bit27%~ 
	~%bit30%~ ~%bit31%~ ~%bit32%~ ~%bit33%~ ~%bit34%~ ~%bit34%~ ~%bit36%~ ~%bit37%~
	END
	OUTER_SET size *= 8
	OUTER_TEXT_SPRINT bin ~0b~
	OUTER_FOR (i = 0; i < size; ++i) BEGIN
		OUTER_TEXT_SPRINT b $in_bits(~%i%~)
		ACTION_IF (b = 0) OR (b = 1) THEN BEGIN 
			OUTER_SET res = b 
		END ELSE BEGIN
			OUTER_TEXT_SPRINT ctrl ~0b~
			OUTER_FOR (j = 0; j < size; ++j) BEGIN
				OUTER_SET b = (i = j) ? 1 : 0
				OUTER_TEXT_SPRINT ctrl ~%ctrl%%b%~
			END
			OUTER_SET res = ((num BAND ~%ctrl%~) != 0) ? 1 : 0
		END
		OUTER_TEXT_SPRINT bin ~%bin%%res%~
		OUTER_TEXT_SPRINT $bits(~%i%~) ~%res%~
	END
	OUTER_SET num = 0 BOR ~%bin%~
END

///////////////////////////////
// PATCH/ACTION_STRING_SPLIT //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																														//
//	Splits the given string into separate substrings, using the split parameter (which can be any single character) as	//
//	a mean to determin where to split. The substrings are stored in the split_strings array.							//
//																														//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~PATCH_STRING_SPLIT~
	STR_VAR
		string = ~~
		split = ~ ~
	RET
		string_count
	RET_ARRAY
		split_strings
BEGIN
	str_len = STRING_LENGTH ~%string%~
	PATCH_IF (str_len > 0) THEN BEGIN
		INNER_PATCH ~%split%~ BEGIN
			READ_BYTE 0 spl
		END
		id = 0
		TEXT_SPRINT cstr ~~
		c = 0
		FOR (i = 0; i < str_len; ++i) BEGIN
			INNER_PATCH ~%string%~ BEGIN
				READ_BYTE i by				
			END
			PATCH_IF (by != spl) THEN BEGIN
				INNER_PATCH_SAVE cstr ~%cstr%~ BEGIN
					INSERT_BYTES c 1
					WRITE_BYTE c by
				END
				PATCH_IF (i != str_len - 1) THEN BEGIN
					c += 1
				END ELSE BEGIN
					c = 0
				END
			END ELSE BEGIN
				SET c = 0
			END
			PATCH_IF ((c = 0) AND (STRING_LENGTH ~%cstr%~ > 0)) THEN BEGIN
				TEXT_SPRINT $split_strings(~%id%~) ~%cstr%~
				TEXT_SPRINT cstr ~~
				id += 1
			END
		END
		string_count = id
	END ELSE BEGIN
		TEXT_SPRINT $split_strings(~*~) ~*~
		string_count = 0
	END
END


DEFINE_ACTION_FUNCTION ~ACTION_STRING_SPLIT~
	STR_VAR
		string = ~~
		split = ~ ~
	RET
		string_count
	RET_ARRAY
		split_strings
BEGIN
	OUTER_SET str_len = STRING_LENGTH ~%string%~
	ACTION_IF (str_len > 0) THEN BEGIN
		OUTER_INNER_PATCH ~%split%~ BEGIN
			READ_BYTE 0 spl
		END
		OUTER_SET id = 0
		OUTER_TEXT_SPRINT cstr ~~
		OUTER_SET c = 0
		OUTER_FOR (i = 0; i < str_len; ++i) BEGIN
			OUTER_INNER_PATCH ~%string%~ BEGIN
				READ_BYTE i by				
			END
			ACTION_IF (by != spl) THEN BEGIN
				OUTER_INNER_PATCH_SAVE cstr ~%cstr%~ BEGIN
					INSERT_BYTES c 1
					WRITE_BYTE c by
				END
				ACTION_IF (i != str_len - 1) THEN BEGIN
					OUTER_SET c += 1
				END ELSE BEGIN
					OUTER_SET c = 0
				END
			END ELSE BEGIN
				OUTER_SET c = 0
			END
			ACTION_IF ((c = 0) AND (STRING_LENGTH ~%cstr%~ > 0)) THEN BEGIN
				OUTER_TEXT_SPRINT $split_strings(~%id%~) ~%cstr%~
				OUTER_TEXT_SPRINT cstr ~~
				OUTER_SET id += 1
			END
		END
		OUTER_SET string_count = id
	END ELSE BEGIN
		OUTER_TEXT_SPRINT $split_strings(~*~) ~*~
		OUTER_SET string_count = 0
	END
END






















