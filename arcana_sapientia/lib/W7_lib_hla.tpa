//////////////////////
//REQUIRED LIBRARIES//
//////////////////////////////////////////////////////////
//														//
// For this library to work you need also to include:	//
//														//
//	W7_lib_utility										//
//	W7_lib_class										//
//														//
//////////////////////////////////////////////////////////

/////////////////////////////////
// PRIVATE_ABBREVIATIONS_ARRAY //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																	//
//	Creates an array containing all the trueclass, multiclass and kits.																//
//	Each one of them is linked to a two letter (class or multiclass exclusive) id, used to determine the name of its HLA table.		//
//	This function is not intended to be used on its own, it would be a private function if there was such thing in WeiDU language.	//
//	Is here only to be called from UPDATE_KIT_HLA_TABLE or UPDATE_CLASS_HLA_TABLES.													//
//																																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~PRIVATE_ABBREVIATIONS_ARRAY~
	RET_ARRAY
		abbreviations_array
BEGIN
	ACTION_DEFINE_ARRAY class_abbr BEGIN ~*~ ~MA~ ~FI~ ~CL~ ~TH~ ~BA~ ~PA~ ~FM~ ~FC~ ~FT~ ~3T~ ~DR~ ~RA~ ~MT~ ~CM~ ~CT~ ~FD~ ~3C~ ~CR~ ~SO~ ~MO~ ~SH~ END
	COPY_EXISTING ~CLASS.IDS~ ~override~
		COUNT_2DA_COLS cols
		READ_2DA_ENTRIES_NOW rows cols
		FOR (row = 1; row < rows; row += 1) BEGIN
			READ_2DA_ENTRY_FORMER rows row 1 class
			READ_2DA_ENTRY_FORMER rows row 0 id
			PATCH_IF IS_AN_INT ~%id%~ THEN BEGIN
				PATCH_IF ~%id%~ <= 21 THEN BEGIN
					TEXT_SPRINT a $class_abbr(~%id%~)
					TEXT_SPRINT $abbreviations_array(~%class%~) ~%a%0~
				END
			END
		END
	BUT_ONLY
	COPY_EXISTING ~KITLIST.2DA~ ~override~
		COUNT_2DA_COLS cols
		READ_2DA_ENTRIES_NOW rows cols
		FOR (row = 0; row < rows; row += 1) BEGIN
			READ_2DA_ENTRY_FORMER rows row 1 kit
			READ_2DA_ENTRY_FORMER rows row 8 id
			PATCH_IF (IS_AN_INT ~%id%~) THEN BEGIN
				PATCH_IF ~%id%~ <= 21 THEN BEGIN
					TEXT_SPRINT a $class_abbr(~%id%~)
					TEXT_SPRINT $abbreviations_array(~%kit%~) ~%a%1~
				END
			END
		END
	BUT_ONLY
END

//////////////////////////
// UPDATE_KIT_HLA_TABLE //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																														//
//	Assign an exclusive HLA table to the given trueclass, multiclass or kit	and updates the numbering of all the tables	//
//	associated with a kit belonging to the given class (or the same class as the given kit does).						//
//	Trueclass and multiclass will have a table in the form LUW7[class id]00.2DA.										//
//	Kits will have a table in the form LUW7[class id][kit number].2DA.													//
//	Kits numbers are two digit and begin at 01. New numbers will be added as needed.									//
//																														//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~UPDATE_KIT_HLA_TABLE~
	STR_VAR
		kit_name = ~*~
	RET
		kit_table
BEGIN
	OUTER_TEXT_SPRINT kit_table ~*~
	LAF PRIVATE_ABBREVIATIONS_ARRAY RET_ARRAY abbreviations_array END
	ACTION_IF VARIABLE_IS_SET $abbreviations_array(~%kit_name%~) THEN BEGIN
		COPY_EXISTING ~LUABBR.2DA~ ~override~
			SNPRINT 2 tab_type $abbreviations_array(~%kit_name%~)
			c = 1
			COUNT_2DA_COLS cols
			READ_2DA_ENTRIES_NOW rows cols
			FOR (row = 0; row < rows; row += 1) BEGIN
				READ_2DA_ENTRY_FORMER rows row 0 kit
				READ_2DA_ENTRY_FORMER rows row 1 old_abbr
				SNPRINT 4 abbr_type ~%old_abbr%~
				SNPRINT (0 - 1) kit_type $abbreviations_array(~%kit%~)
				PATCH_IF ~%kit%~ STRING_EQUAL_CASE ~%kit_name%~ THEN BEGIN
					PATCH_IF (kit_type = 0) THEN BEGIN
						TEXT_SPRINT new_abbr ~W7%tab_type%00~
					END ELSE BEGIN
						LPF PATCH_PADDING INT_VAR num = c RET cc = pad_num END
						TEXT_SPRINT new_abbr ~W7%tab_type%%cc%~
						c += 1
					END
					TEXT_SPRINT kit_table ~LU%new_abbr%.2DA~
					PATCH_IF !(~%old_abbr%~ STRING_EQUAL_CASE ~%new_abbr%~) THEN BEGIN
						SET_2DA_ENTRY row 1 cols ~%new_abbr%~
						INNER_ACTION BEGIN
							COPY_EXISTING ~LU%old_abbr%.2DA~ ~override/LU%new_abbr%_temp.2DA~
						END
						SNPRINT 2 tag ~%old_abbr%~
						PATCH_IF ~%tag%~ STRING_EQUAL_CASE ~W7~ THEN BEGIN
							PATCH_IF !(~%old_abbr%~ STRING_EQUAL_CASE ~W7%tab_type%00~) THEN BEGIN
								TEXT_SPRINT $old_abbrs(~%old_abbr%~) ~*~
							END
						END
						TEXT_SPRINT $new_abbrs(~%new_abbr%~) ~*~
					END
				END	ELSE BEGIN		
					PATCH_IF ~%abbr_type%~ STRING_EQUAL_CASE ~W7%tab_type%~ THEN BEGIN
						PATCH_IF ~%old_abbr%~ STRING_EQUAL_CASE ~W7%tab_type%00~ THEN BEGIN
							TEXT_SPRINT new_abbr ~W7%tab_type%00~
						END ELSE BEGIN
							LPF PATCH_PADDING INT_VAR num = c RET cc = pad_num END
							TEXT_SPRINT new_abbr ~W7%tab_type%%cc%~
							c += 1
						END
						PATCH_IF !(~%old_abbr%~ STRING_EQUAL_CASE ~%new_abbr%~) THEN BEGIN
							SET_2DA_ENTRY row 1 cols ~%new_abbr%~
							INNER_ACTION BEGIN
								COPY_EXISTING ~LU%old_abbr%.2DA~ ~override/LU%new_abbr%_temp.2DA~
							END
							PATCH_IF !(~%old_abbr%~ STRING_EQUAL_CASE ~W7%tab_type%00~) THEN BEGIN
								TEXT_SPRINT $old_abbrs(~%old_abbr%~) ~*~
							END
							TEXT_SPRINT $new_abbrs(~%new_abbr%~) ~*~
						END
					END
				END
			END
			PRETTY_PRINT_2DA
		BUT_ONLY
		ACTION_PHP_EACH new_abbrs AS new_abbr => v BEGIN
			COPY_EXISTING ~LU%new_abbr%_temp.2DA~ ~override/LU%new_abbr%.2DA~
			DELETE ~override/LU%new_abbr%_temp.2DA~
		END
		ACTION_PHP_EACH old_abbrs AS old_abbr => v BEGIN
			ACTION_IF !(VARIABLE_IS_SET $new_abbrs(~%old_abbr%~)) THEN BEGIN
				DELETE ~override/LU%old_abbr%.2DA~
			END
		END
	END
	ACTION_IF ~%kit_table%~ STRING_EQUAL_CASE ~*~ THEN BEGIN
		WARN ~%kit_name% HLA table not found!~
	END
END

/////////////////////////////
// UPDATE_CLASS_HLA_TABLES //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																															//
//	Assigns an updated class based HLA to each kit associated with the given class and sharing the same HLA table with it.	//
//	If the kit already has an exclusive table, updates its numbering as needed.												//
//	Trueclass and multiclass will have a table in the form LUW7[class id]00.2DA.											//
//	Kits originally sharing the same table as the given class will have a table in the form LUW7[class id]00.2DA.			//
//	Kits originally having an exclusive table will have a table in the form LUW7[class id][kit number].2DA.					//
//	Kits numbers are two digit and begin at 01. New numbers will be added as needed.										//
//																															//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~UPDATE_CLASS_HLA_TABLES~
	STR_VAR
		class_name = ~*~
	RET
		class_table
	RET_ARRAY
		kit_tables
BEGIN
	LAF PRIVATE_ABBREVIATIONS_ARRAY RET_ARRAY abbreviations_array END
	OUTER_SET found = 0
	ACTION_IF VARIABLE_IS_SET $abbreviations_array(~%class_name%~) THEN BEGIN
		OUTER_SNPRINT (0 - 1) kit_type $abbreviations_array(~%class_name%~)
		ACTION_IF (kit_type = 0) THEN BEGIN
			LAF LIST_CLASS_KITS STR_VAR class_name = EVAL ~%class_name%~ RET_ARRAY kit_list END
			COPY_EXISTING ~LUABBR.2DA~ ~override~
				SNPRINT 2 tab_type $abbreviations_array(~%class_name%~)
				TEXT_SPRINT class_table ~LUW7%tab_type%00.2DA~
				COUNT_2DA_COLS cols
				READ_2DA_ENTRIES_NOW rows cols
				FOR (row = 0; row < rows; row += 1) BEGIN
					READ_2DA_ENTRY_FORMER rows row 0 kit
					PATCH_IF ~%kit%~ STRING_EQUAL_CASE ~%class_name%~ THEN BEGIN
						READ_2DA_ENTRY_FORMER rows row 1 class_abbr
					END
				END
				c = 1
				FOR (row = 0; row < rows; row += 1) BEGIN
					READ_2DA_ENTRY_FORMER rows row 0 kit
					PATCH_IF (~%kit%~ STRING_EQUAL_CASE ~%class_name%~) OR (VARIABLE_IS_SET $kit_list(~%kit%~)) THEN BEGIN
						READ_2DA_ENTRY_FORMER rows row 1 old_abbr
						PATCH_IF ~%old_abbr%~ STRING_EQUAL_CASE ~%class_abbr%~ THEN BEGIN
							TEXT_SPRINT new_abbr ~W7%tab_type%00~
						END ELSE BEGIN
							LPF PATCH_PADDING INT_VAR num = c RET cc = pad_num END
							TEXT_SPRINT new_abbr ~W7%tab_type%%cc%~
							c += 1
						END
						TEXT_SPRINT $kit_tables(~%kit%~) ~LU%new_abbr%.2DA~
						PATCH_IF !(~%old_abbr%~ STRING_EQUAL_CASE ~%new_abbr%~) THEN BEGIN
							SET_2DA_ENTRY row 1 cols ~%new_abbr%~
							INNER_ACTION BEGIN
								COPY_EXISTING ~LU%old_abbr%.2DA~ ~override/LU%new_abbr%_temp.2DA~
							END
							SNPRINT 2 tag ~%old_abbr%~
							PATCH_IF ~%tag%~ STRING_EQUAL_CASE ~W7~ THEN BEGIN
								PATCH_IF !(~%old_abbr%~ STRING_EQUAL_CASE ~W7%tab_type%00~) THEN BEGIN
									TEXT_SPRINT $old_abbrs(~%old_abbr%~) ~*~
								END
							END
							TEXT_SPRINT $new_abbrs(~%new_abbr%~) ~*~
						END
					END
				END
				PRETTY_PRINT_2DA
				found = 1
			BUT_ONLY
			ACTION_PHP_EACH new_abbrs AS new_abbr => v BEGIN
				COPY_EXISTING ~LU%new_abbr%_temp.2DA~ ~override/LU%new_abbr%.2DA~
				DELETE ~override/LU%new_abbr%_temp.2DA~
			END
			ACTION_PHP_EACH old_abbrs AS old_abbr => v BEGIN
				ACTION_IF !(VARIABLE_IS_SET $new_abbrs(~%old_abbr%~)) THEN BEGIN
					DELETE ~override/LU%old_abbr%.2DA~
				END
			END
		END ELSE BEGIN
			WARN ~%class_name% is a kit: use UPDATE_KIT_HLA_TABLE instead!~
		END
	END ELSE BEGIN
		WARN ~%class_name% HLA table not found!~
	END
	ACTION_IF (found = 0) THEN BEGIN
		OUTER_TEXT_SPRINT class_table ~*~
		OUTER_TEXT_SPRINT $kit_tables(~*~) ~*~
	END
	ACTION_IF !(VARIABLE_IS_SET $kit_list(~*~)) THEN BEGIN
		ACTION_PHP_EACH kit_list AS kit => id BEGIN
			ACTION_IF !(VARIABLE_IS_SET $kit_tables(~%kit%~)) THEN BEGIN
				WARN ~%kit% HLA table not found!~
			END
		END
	END
END

////////////////////////
// POPULATE_HLA_ARRAY //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																															//
//	Creates an array of abilities to be used by HLA editing functions.														//
//	This function is intended to consent the editing of multiple HLAs at the same time using ADD_KIT_HLAS, ADD_CLASS_HLAS,	//
//	REMOVE_KIT_HLAS, REMOVE_CLASS_HLAS, EDIT_KIT_HLAS, or EDIT_CLASS_HLAS.													//
//																															//
//	In order to do this, you need first of all to:																			//
//																															//
//	LAF POPULATE_HLA_ARRAY STR_VAR ability = ~your_first_ability~ [optional parameters] END									//
//	LAF POPULATE_HLA_ARRAY STR_VAR ability = ~your_second_ability~ [optional parameters] END								//
//	LAF POPULATE_HLA_ARRAY STR_VAR ability = ~your_[...]_ability~ [optional parameters] END									//
//	LAF POPULATE_HLA_ARRAY STR_VAR ability = ~your_last_ability~ [optional parameters] END									//
//																															//
//	Then you can:																											//
//																															//
//	LAF ADD_KIT_HLAS STR_VAR kit_name = ~your_kit_name~ END 																//
//																															//
//	Or:																														//
//																															//
//	LAF ADD_CLASS_HLAS STR_VAR kit_name = ~your_kit_name~ END 																//
//																															//
//	Or:																														//
//																															//
//	LAF REMOVE_KIT_HLAS STR_VAR kit_name = ~your_kit_name~ END 																//
//																															//
//	Or:																														//
//																															//
//	LAF REMOVE_CLASS_HLAS STR_VAR kit_name = ~your_kit_name~ END 															//
//																															//
//	Or:																														//
//																															//
//	LAF EDIT_KIT_HLAS STR_VAR kit_name = ~your_kit_name~ END 																//
//																															//
//	Or:																														//
//																															//
//	LAF EDIT_CLASS_HLAS STR_VAR kit_name = ~your_kit_name~ END																//
//																															//
//	You can also add the last ability using the resolving function parameters in the same way as you would do if you were	//
//	editing a single HLA. Calling the resolving function with a clear parameter greater than 0 will clear the ability 		//
//	array after the editing. Calling POPULATE_HLA_ARRAY with a clear parameter greater than 0 will clear the ability array	//
//	and start a new array containing only its ability.																		//
//																															//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~POPULATE_HLA_ARRAY~
	INT_VAR
		clear = 0
	STR_VAR
		ability = ~*~
		row_name = ~W7?0~
		type = ~W7?1~
		icon = ~W7?2~
		strref = ~W7?3~
		min_lvl = ~W7?4~
		max_lvl = ~W7?5~
		num_allowed = ~W7?6~
		prerequisite = ~W7?7~
		excluded_by = ~W7?8~
		alignment_restrict = ~W7?9~
		new_name = ~W7?A~
BEGIN
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
<<<<<<<<...inlined/W7/lib/DUMMY_HLA_ARRAY.tpa
ACTION_DEFINE_ASSOCIATIVE_ARRAY W7_hla_array BEGIN
END
>>>>>>>>
		ACTION_IF !(FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
			COPY ~...inlined/W7/lib/DUMMY_HLA_ARRAY.tpa~ ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
		END
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
		OUTER_SET c = 0
		ACTION_PHP_EACH W7_hla_array AS k => v BEGIN
			OUTER_SET c += 1
		END
		COPY ~%MOD_FOLDER%/temp/W7_hla_array.tpa~ ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
			REPLACE_TEXTUALLY ~END~ ~"%c%", "%ability%" => "%row_name% %type%_%new_name% %icon% %strref% %min_lvl% %max_lvl% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%"~
		BUT_ONLY
		APPEND_OUTER ~%MOD_FOLDER%/temp/W7_hla_array.tpa~ ~END~
	END ELSE BEGIN
		WARN ~Ability parameter may not be empty! Skipping POPULATE_HLA_ARRAY.~
	END
END

////////////////////////////////
// PRIVATE_HLA_STRING_REPLACE //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																	//
//	Replace all the special substring (W7?[hex number]) in the given string with the given (or default) parameters.					//
//	This is needed to make POPULATE_HLA_ARRAY compatible with every ADD_HLAS and EDIT_HLAS functions.								//
//	This function is not intended to be used on its own, it would be a private function if there was such thing in WeiDU language.	//
//	Is here only to be called from PRIVATE_ADD_HLAS or PRIVATE_EDIT_HLAS.															//
//																																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~PRIVATE_HLA_STRING_REPLACE~
	STR_VAR
		string = ~~
		row_name = ~*~
		type = ~AP~
		icon = ~*~
		strref = ~*~
		min_lvl = ~1~
		max_lvl = ~99~
		num_allowed = ~1~
		prerequisite = ~*~
		excluded_by = ~*~
		alignment_restrict = ~*~
		new_name = ~*~
	RET
		string
BEGIN
	INNER_PATCH_SAVE string ~%string%~ BEGIN
		REPLACE_TEXTUALLY ~W7\?0 ~ ~%row_name% ~
		REPLACE_TEXTUALLY ~ W7\?1_~ ~ %type%_~
		REPLACE_TEXTUALLY ~ W7\?2 ~ ~ %icon% ~
		REPLACE_TEXTUALLY ~ W7\?3 ~ ~ %strref% ~
		REPLACE_TEXTUALLY ~ W7\?4 ~ ~ %min_lvl% ~
		REPLACE_TEXTUALLY ~ W7\?5 ~ ~ %max_lvl% ~
		REPLACE_TEXTUALLY ~ W7\?6 ~ ~ %num_allowed% ~
		REPLACE_TEXTUALLY ~ W7\?7 ~ ~ %prerequisite% ~
		REPLACE_TEXTUALLY ~ W7\?8 ~ ~ %excluded_by% ~
		REPLACE_TEXTUALLY ~ W7\?9~ ~ %alignment_restrict%~
		REPLACE_TEXTUALLY ~_W7\?A ~ ~_%new_name% ~
	END
END

//////////////////////
// PRIVATE_ADD_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																	//
//	Adds the specified hlas to the given trueclass, multiclass or kit HLA table.													//
//	This function is not intended to be used on its own, it would be a private function if there was such thing in WeiDU language.	//
//	Is here only to be called from ADD_KIT_HLAS or ADD_CLASS_HLAS.																	//
//																																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~PRIVATE_ADD_HLAS~
	STR_VAR
		kit_name = ~*~
		kit_table = ~*~
	RET
		last_insert
	RET_ARRAY
		insert_array
BEGIN
	OUTER_SET result = 0
	ACTION_IF !(~%kit_table%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		COPY_EXISTING ~%kit_table%~ ~override~
			SNPRINT 1 init ~%kit_name%~
			TO_LOWER kit_name
			SNPRINT (0 - STRING_LENGTH ~%kit_name%~ + 1) kit_name ~%kit_name%~
			TEXT_SPRINT kit_name ~%init%%kit_name%~
			COUNT_2DA_COLS cols
			COUNT_2DA_ROWS cols rows
			PATCH_IF (rows < 25) THEN BEGIN
				PATCH_IF (rows < 24) THEN BEGIN
					FOR (i = rows + 1; i <= 25; ++i) BEGIN
						INSERT_2DA_ROW (i - 1) cols ~%i% * * * * * * * * *~
					END
				END ELSE BEGIN
					PATCH_IF GAME_IS ~bgee bg2ee eet~ THEN BEGIN
						INSERT_2DA_ROW 24 cols ~25 * * * * * * * * *~
					END
				END
			END
			c = 0
			READ_2DA_ENTRIES_NOW rows cols
			FOR (row = 0; row < rows; row += 1) BEGIN
				blank = 0
				FOR(col = 1; col < cols; col += 1) BEGIN
					READ_2DA_ENTRY_FORMER rows row col entry
					PATCH_IF ~%entry%~ STRING_EQUAL_CASE ~*~ THEN BEGIN
						blank += 1
					END
				END
				PATCH_IF (blank = (cols - 1)) THEN BEGIN
					rn = row + 1
					PATCH_IF (~%row_name%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
						TEXT_SPRINT row_name ~%rn%~
					END
					TEXT_SPRINT $blank_rows(~%c%~) ~%row%~
					c += 1
				END
			END
			PHP_EACH W7_hla_array AS id => hla BEGIN
				LPF PRIVATE_HLA_STRING_REPLACE STR_VAR string = EVAL ~%hla%~ new_name = EVAL ~%id_1%~ RET hla = string END
				SNPRINT 1 rn ~%hla%~
				PATCH_IF (c > 0) THEN BEGIN
					TEXT_SPRINT row $blank_rows(~%id%~)
					PATCH_IF ~%rn%~ STRING_EQUAL_CASE ~*~ THEN BEGIN
						SNPRINT (0 - STRING_LENGTH ~%hla%~ + 1) hla ~%hla%~
						rn = row + 1
						TEXT_SPRINT hla ~%rn%%hla%~
					END
					INSERT_2DA_ROW row cols ~%hla%~
					REMOVE_2DA_ROW (row + 1) cols
					TEXT_SPRINT $insert_array(~%id_1%~) ~%row%~
					last_insert = row
					c -= 1
					result = 1
				END ELSE BEGIN				
					rp = 1
					WHILE rp BEGIN
						PATCH_PRINT ~Cannot insert %id_1%: %kit_name% HLA table is already full!
[S]elect the ability to replace, or [K]eep the old abilities?~
						PATCH_READLN key
						PATCH_MATCH ~%key%~
						WITH
							~s~ BEGIN
								FOR (row = 0; row < rows; row += 1) BEGIN
									opt = row + 1
									READ_2DA_ENTRY row 1 cols abi
									SNPRINT (0 - STRING_LENGTH ~%abi%~ + 3) abi ~%abi%~
									PATCH_PRINT ~[%opt%] %abi%~
								END
								WHILE rp BEGIN
									PATCH_PRINT ~Type the ability number to replace, or [K]eep the old abilities?~
									PATCH_READLN key
									PATCH_IF ~%key%~ STRING_EQUAL_CASE ~k~ THEN BEGIN
										rp = 0
									END
									PATCH_IF IS_AN_INT key BEGIN
										PATCH_IF (key > 0) AND (key <= rows) THEN BEGIN
											PATCH_IF ~%rn%~ STRING_EQUAL_CASE ~*~ THEN BEGIN
												SNPRINT (0 - STRING_LENGTH ~%hla%~ + 1) hla ~%hla%~
												TEXT_SPRINT hla ~%key%%hla%~
											END
											row = key - 1
											READ_2DA_ENTRY row 1 cols abi
											SNPRINT (0 - STRING_LENGTH ~%abi%~ + 3) abi ~%abi%~
											INSERT_2DA_ROW row cols ~%hla%~
											REMOVE_2DA_ROW key cols
											PATCH_PRINT ~Ability %abi% replaced successfully!~
											PHP_EACH insert_array AS an => ap BEGIN
												PATCH_IF ~%an%~ STRING_EQUAL_CASE ~%abi%~ THEN BEGIN
													TEXT_SPRINT $insert_temp_array(~%id_1%~) ~%row%~
												END ELSE BEGIN
													TEXT_SPRINT $insert_temp_array(~%an%~) ~%ap%~
												END
											END
											CLEAR_ARRAY insert_array
											PHP_EACH insert_temp_array AS an => ap BEGIN
												TEXT_SPRINT $insert_array(~%an%~) ~%ap%~
											END
											CLEAR_ARRAY insert_temp_array
											last_insert = row
											result = 1
											rp = 0
										END
									END
								END
							END
							~k~ BEGIN
								rp = 0
							END
							DEFAULT
						END
					END
				END
			END
			PRETTY_PRINT_2DA
		BUT_ONLY
	END
	ACTION_IF (result = 0) THEN BEGIN
		OUTER_SET last_insert = ~-1~
		OUTER_TEXT_SPRINT $insert_array(~*~) ~*~
	END
END

//////////////////
// ADD_KIT_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																		//
//	Adds the specified HLA to the given trueclass, multiclass or kit. Multiple HLAs can be added using the POPULATE_HLA_ARRAY function.	//
//																																		//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~ADD_KIT_HLAS~
	INT_VAR
		clear = 1
	STR_VAR
		kit_name = ~*~
		ability = ~*~
		row_name = ~*~
		type = ~AP~
		icon = ~*~
		strref = ~*~
		min_lvl = ~1~
		max_lvl = ~99~
		num_allowed = ~1~
		prerequisite = ~*~
		excluded_by = ~*~
		alignment_restrict = ~*~
	RET
		last_insert
	RET_ARRAY
		insert_array
BEGIN
	ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	OUTER_SET c = 0
	ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
		OUTER_SET c += 1
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		OUTER_TEXT_SPRINT $W7_hla_array(~%c%~ ~%ability%~) ~%row_name% %type%_%ability% %icon% %strref% %min_lvl% %max_lvl% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
		OUTER_SET c += 1
	END
	ACTION_IF (c > 0) THEN BEGIN
		LAF UPDATE_KIT_HLA_TABLE STR_VAR kit_name = EVAL ~%kit_name%~ RET kit_table END
		LAF PRIVATE_ADD_HLAS STR_VAR kit_name = EVAL ~%kit_name%~ kit_table = EVAL ~%kit_table%~ RET last_insert RET_ARRAY insert_array END
	END ELSE BEGIN
		WARN ~Ability array may not be empty! Skipping ADD_KIT_HLAS.~
		OUTER_SET last_insert = ~-1~
		OUTER_TEXT_SPRINT $insert_array(~*~) ~*~	
	END
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
END

////////////////////
// ADD_CLASS_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																			//
//	Adds the specified HLA to the given class or multiclass and its kits. Multiple HLAs can be added using the POPULATE_HLA_ARRAY function.	//
//																																			//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~ADD_CLASS_HLAS~
	INT_VAR
		clear = 1
	STR_VAR
		class_name = ~*~
		ability = ~*~
		row_name = ~*~
		type = ~AP~
		icon = ~*~
		strref = ~*~
		min_lvl = ~1~
		max_lvl = ~99~
		num_allowed = ~1~
		prerequisite = ~*~
		excluded_by = ~*~
		alignment_restrict = ~*~
	RET_ARRAY
		last_insert
		insert_array
BEGIN
	ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	OUTER_SET c = 0
	ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
		OUTER_SET c += 1
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		OUTER_TEXT_SPRINT $W7_hla_array(~%c%~ ~%ability%~) ~%row_name% %type%_%ability% %icon% %strref% %min_lvl% %max_lvl% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
		OUTER_SET c += 1
	END
	ACTION_IF (c > 0) THEN BEGIN
		LAF UPDATE_CLASS_HLA_TABLES STR_VAR class_name = EVAL ~%class_name%~ RET_ARRAY kit_tables END
		ACTION_PHP_EACH kit_tables AS kit => tab BEGIN
			OUTER_SET add = 1
			ACTION_PHP_EACH distinct_kit_tables AS dkit => dtab BEGIN
				ACTION_IF ~%dtab%~ STRING_EQUAL_CASE ~%tab%~ THEN BEGIN
					OUTER_SET add = 0
				END
			END
			ACTION_IF (add = 1) THEN BEGIN
				OUTER_TEXT_SPRINT $distinct_kit_tables(~%kit%~) ~%tab%~
			END
		END	
		ACTION_PHP_EACH distinct_kit_tables AS kit => tab BEGIN
			LAF PRIVATE_ADD_HLAS STR_VAR kit_name = EVAL ~%kit%~ kit_table = EVAL ~%tab%~ RET last_insert RET_ARRAY insert_array END
			OUTER_TEXT_SPRINT $last_insert(~%kit%~) ~%last_insert%~
			ACTION_PHP_EACH insert_array AS abi => row BEGIN
				OUTER_TEXT_SPRINT $class_insert_array(~%kit%~ ~%abi%~) ~%row%~
			END
		END
		ACTION_CLEAR_ARRAY insert_array
		ACTION_PHP_EACH class_insert_array AS key => val BEGIN
			OUTER_TEXT_SPRINT $insert_array(~%key_0%~ ~%key_1%~) ~%val%~
		END
	END ELSE BEGIN
		WARN ~Ability array may not be empty! Skipping ADD_CLASS_HLAS.~
		OUTER_TEXT_SPRINT $last_insert(~*~) ~*~
		OUTER_TEXT_SPRINT $insert_array(~*~) ~*~
	END
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END	
END

/////////////////////////
// PRIVATE_REMOVE_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																	//
//	Removes the specified hlas from the given trueclass, multiclass or kit HLA table.												//
//	This function is not intended to be used on its own, it would be a private function if there was such thing in WeiDU language.	//
//	Is here only to be called from REMOVE_KIT_HLAS or REMOVE_CLASS_HLAS.															//
//																																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~PRIVATE_REMOVE_HLAS~
	STR_VAR
		kit_name = ~*~
		kit_table = ~*~
BEGIN
	ACTION_IF !(~%kit_table%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		COPY_EXISTING ~%kit_table%~ ~override~
			COUNT_2DA_COLS cols
			COUNT_2DA_ROWS cols rows
			PATCH_IF (rows < 25) THEN BEGIN
				PATCH_IF (rows < 24) THEN BEGIN
					FOR (i = rows + 1; i <= 25; ++i) BEGIN
						INSERT_2DA_ROW (i - 1) cols ~%i% * * * * * * * * *~
					END
				END ELSE BEGIN
					PATCH_IF GAME_IS ~bgee bg2ee eet~ THEN BEGIN
						INSERT_2DA_ROW 24 cols ~25 * * * * * * * * *~
					END
				END
			END
			c = 0
			READ_2DA_ENTRIES_NOW rows cols
			FOR (row = 0; row < rows; row += 1) BEGIN
				PATCH_IF (c > 0) THEN BEGIN
					READ_2DA_ENTRY_FORMER rows row 0 rid
					PATCH_IF IS_AN_INT rid THEN BEGIN
						rid -= c
						SET_2DA_ENTRY (row - c) 0 cols ~%rid%~
					END
				END
				READ_2DA_ENTRY_FORMER rows row 1 abi
				SNPRINT (0 - STRING_LENGTH ~%abi%~ + 3) abi ~%abi%~
				rem = 0
				PHP_EACH W7_hla_array AS id => hla BEGIN
					PATCH_IF ~%id_1%~ STRING_EQUAL_CASE ~%abi%~ THEN BEGIN
						rem = 1
						TEXT_SPRINT $rem_array(~%id_1%~) ~%*%~
					END
				END
				PATCH_IF (rem = 1) THEN BEGIN
					REMOVE_2DA_ROW (row - c) cols
					c += 1
				END
			END
			FOR (i = rows - c + 1; i <= rows; ++i) BEGIN
				INSERT_2DA_ROW (i - 1) cols ~%i% * * * * * * * * *~
			END
			PRETTY_PRINT_2DA
		BUT_ONLY
		ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
			ACTION_IF !(VARIABLE_IS_SET $rem_array(~%id_1%~)) THEN BEGIN
				PRINT ~Ability %id_1% not found in %kit_name% HLA table!~
			END
		END		
	END
END

/////////////////////
// REMOVE_KIT_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																				//
//	Removes the specified HLA from the given trueclass, multiclass or kit. Multiple HLAs can be removed using the POPULATE_HLA_ARRAY function.	//
//																																				//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~REMOVE_KIT_HLAS~
	INT_VAR
		clear = 1
	STR_VAR
		kit_name = ~*~
		ability = ~*~
BEGIN
	ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	OUTER_SET c = 0
	ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
		OUTER_SET c += 1
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		OUTER_TEXT_SPRINT $W7_hla_array(~%c%~ ~%ability%~) ~*~
		OUTER_SET c += 1
	END
	ACTION_IF (c > 0) THEN BEGIN
		LAF UPDATE_KIT_HLA_TABLE STR_VAR kit_name = EVAL ~%kit_name%~ RET kit_table END
		LAF PRIVATE_REMOVE_HLAS STR_VAR kit_name = EVAL ~%kit_name%~ kit_table = EVAL ~%kit_table%~ END
	END ELSE BEGIN
		WARN ~Ability array may not be empty! Skipping REMOVE_KIT_HLAS.~	
	END
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END	
END

///////////////////////
// REMOVE_CLASS_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																					//
//	Removes the specified HLA from the given class or multiclass and its kits. Multiple HLAs can be removed using the POPULATE_HLA_ARRAY function.	//
//																																					//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~REMOVE_CLASS_HLAS~
	INT_VAR
		clear = 1
	STR_VAR
		class_name = ~*~
		ability = ~*~
BEGIN
	ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	OUTER_SET c = 0
	ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
		OUTER_SET c += 1
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		OUTER_TEXT_SPRINT $W7_hla_array(~%c%~ ~%ability%~) ~*~
		OUTER_SET c += 1
	END
	ACTION_IF (c > 0) THEN BEGIN
		LAF UPDATE_CLASS_HLA_TABLES STR_VAR class_name = EVAL ~%class_name%~ RET_ARRAY kit_tables END
		ACTION_PHP_EACH kit_tables AS kit => tab BEGIN
			OUTER_SET add = 1
			ACTION_PHP_EACH distinct_kit_tables AS dkit => dtab BEGIN
				ACTION_IF ~%dtab%~ STRING_EQUAL_CASE ~%tab%~ THEN BEGIN
					OUTER_SET add = 0
				END
			END
			ACTION_IF (add = 1) THEN BEGIN
				OUTER_TEXT_SPRINT $distinct_kit_tables(~%kit%~) ~%tab%~
			END
		END
		ACTION_PHP_EACH distinct_kit_tables AS kit => tab BEGIN
			LAF PRIVATE_REMOVE_HLAS STR_VAR kit_name = EVAL ~%kit%~ kit_table = EVAL ~%tab%~ END
		END
	END ELSE BEGIN
		WARN ~Ability array may not be empty! Skipping REMOVE_CLASS_HLAS.~	
	END
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END	
END

///////////////////////
// PRIVATE_EDIT_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																	//
//	Edits the specified hlas for the given trueclass, multiclass or kit HLA table.													//
//	This function is not intended to be used on its own, it would be a private function if there was such thing in WeiDU language.	//
//	Is here only to be called from EDIT_KIT_HLAS or EDIT_CLASS_HLAS.																//
//																																	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~PRIVATE_EDIT_HLAS~
	STR_VAR
		kit_name = ~*~
		kit_table = ~*~
BEGIN
	ACTION_IF !(~%kit_table%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		COPY_EXISTING ~%kit_table%~ ~override~
			COUNT_2DA_COLS cols
			COUNT_2DA_ROWS cols rows
			PATCH_IF (rows < 25) THEN BEGIN
				PATCH_IF (rows < 24) THEN BEGIN
					FOR (i = rows + 1; i <= 25; ++i) BEGIN
						INSERT_2DA_ROW (i - 1) cols ~%i% * * * * * * * * *~
					END
				END ELSE BEGIN
					PATCH_IF GAME_IS ~bgee bg2ee eet~ THEN BEGIN
						INSERT_2DA_ROW 24 cols ~25 * * * * * * * * *~
					END
				END
			END
			READ_2DA_ENTRIES_NOW rows cols
			FOR (row = 0; row < rows; row += 1) BEGIN
				READ_2DA_ENTRY_FORMER rows row 1 ability
				SNPRINT (0 - STRING_LENGTH ~%ability%~ + 3) nm ~%ability%~
				PHP_EACH W7_hla_array AS id => hla BEGIN
					PATCH_IF ~%id_1%~ STRING_EQUAL_CASE ~%nm%~ THEN BEGIN
						READ_2DA_ENTRY_FORMER rows row 0 rn
						SNPRINT 2 ty ~%ability%~
						READ_2DA_ENTRY_FORMER rows row 2 ic
						READ_2DA_ENTRY_FORMER rows row 3 st
						READ_2DA_ENTRY_FORMER rows row 4 mn
						READ_2DA_ENTRY_FORMER rows row 5 mx
						READ_2DA_ENTRY_FORMER rows row 6 na
						READ_2DA_ENTRY_FORMER rows row 7 pr
						READ_2DA_ENTRY_FORMER rows row 8 ex
						READ_2DA_ENTRY_FORMER rows row 9 al
						LPF PRIVATE_HLA_STRING_REPLACE
							STR_VAR 
								string = EVAL ~%hla%~
								row_name = EVAL ~%rn%~
								type = EVAL ~%ty%~
								icon = EVAL ~%ic%~
								strref = EVAL ~%st%~
								min_lvl = EVAL ~%mn%~
								max_lvl = EVAL ~%mx%~
								num_allowed = EVAL ~%na%~
								prerequisite = EVAL ~%pr%~
								excluded_by = EVAL ~%ex%~
								alignment_restrict = EVAL ~%al%~
								new_name = EVAL ~%nm%~
							RET
								hla = string
						END
						INSERT_2DA_ROW row cols ~%hla%~
						REMOVE_2DA_ROW (row + 1) cols
						TEXT_SPRINT $edit_array(~%id_1%~) ~%*%~
					END
				END
			END
			PRETTY_PRINT_2DA
		BUT_ONLY
		ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
			ACTION_IF !(VARIABLE_IS_SET $edit_array(~%id_1%~)) THEN BEGIN
				PRINT ~Ability %id_1% not found in %kit_name% HLA table!~
			END
		END
	END
END

///////////////////
// EDIT_KIT_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																			//
//	Edits the specified HLA for the given trueclass, multiclass or kit. Multiple HLAs can be edited using the POPULATE_HLA_ARRAY function.	//
//																																			//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~EDIT_KIT_HLAS~
	INT_VAR
		clear = 1
	STR_VAR
		kit_name = ~*~
		ability = ~*~
		row_name = ~W7?0~
		type = ~W7?1~
		icon = ~W7?2~
		strref = ~W7?3~
		min_lvl = ~W7?4~
		max_lvl = ~W7?5~
		num_allowed = ~W7?6~
		prerequisite = ~W7?7~
		excluded_by = ~W7?8~
		alignment_restrict = ~W7?9~
		new_name = ~W7?A~
BEGIN
	ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	OUTER_SET c = 0
	ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
		OUTER_SET c += 1
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		OUTER_TEXT_SPRINT $W7_hla_array(~%c%~ ~%ability%~) ~%row_name% %type%_%new_name% %icon% %strref% %min_lvl% %max_lvl% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
		OUTER_SET c += 1
	END
	ACTION_IF (c > 0) THEN BEGIN
		LAF UPDATE_KIT_HLA_TABLE STR_VAR kit_name = EVAL ~%kit_name%~ RET kit_table END
		LAF PRIVATE_EDIT_HLAS STR_VAR kit_name = EVAL ~%kit_name%~ kit_table = EVAL ~%kit_table%~ END
	END ELSE BEGIN
		WARN ~Ability array may not be empty! Skipping EDIT_KIT_HLAS.~	
	END
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END	
END

/////////////////////
// EDIT_CLASS_HLAS //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																																				//
//	Edits the specified HLA for the given class or multiclass and its kits. Multiple HLAs can be edited using the POPULATE_HLA_ARRAY function.	//
//																																				//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION ~EDIT_CLASS_HLAS~
	INT_VAR
		clear = 1
	STR_VAR
		class_name = ~*~
		ability = ~*~
		row_name = ~W7?0~
		type = ~W7?1~
		icon = ~W7?2~
		strref = ~W7?3~
		min_lvl = ~W7?4~
		max_lvl = ~W7?5~
		num_allowed = ~W7?6~
		prerequisite = ~W7?7~
		excluded_by = ~W7?8~
		alignment_restrict = ~W7?9~
		new_name = ~W7?A~
BEGIN
	ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		REINCLUDE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
	OUTER_SET c = 0
	ACTION_PHP_EACH W7_hla_array AS id => hla BEGIN
		OUTER_SET c += 1
	END
	ACTION_IF !(~%ability%~ STRING_EQUAL_CASE ~*~) THEN BEGIN
		OUTER_TEXT_SPRINT $W7_hla_array(~%c%~ ~%ability%~) ~%row_name% %type%_%new_name% %icon% %strref% %min_lvl% %max_lvl% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
		OUTER_SET c += 1
	END
	ACTION_IF (c > 0) THEN BEGIN
		LAF UPDATE_CLASS_HLA_TABLES STR_VAR class_name = EVAL ~%class_name%~ RET_ARRAY kit_tables END
		ACTION_PHP_EACH kit_tables AS kit => tab BEGIN
			OUTER_SET add = 1
			ACTION_PHP_EACH distinct_kit_tables AS dkit => dtab BEGIN
				ACTION_IF ~%dtab%~ STRING_EQUAL_CASE ~%tab%~ THEN BEGIN
					OUTER_SET add = 0
				END
			END
			ACTION_IF (add = 1) THEN BEGIN
				OUTER_TEXT_SPRINT $distinct_kit_tables(~%kit%~) ~%tab%~
			END
		END
		ACTION_PHP_EACH distinct_kit_tables AS kit => tab BEGIN
			LAF PRIVATE_EDIT_HLAS STR_VAR kit_name = EVAL ~%kit%~ kit_table = EVAL ~%tab%~ END
		END
	END ELSE BEGIN
		WARN ~Ability array may not be empty! Skipping EDIT_CLASS_HLAS.~	
	END
	ACTION_IF (clear > 0) AND (FILE_EXISTS ~%MOD_FOLDER%/temp/W7_hla_array.tpa~) THEN BEGIN
		DELETE ~%MOD_FOLDER%/temp/W7_hla_array.tpa~
	END
END


















